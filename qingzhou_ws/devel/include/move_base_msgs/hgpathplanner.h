// Generated by gencpp from file move_base_msgs/hgpathplanner.msg
// DO NOT EDIT!


#ifndef MOVE_BASE_MSGS_MESSAGE_HGPATHPLANNER_H
#define MOVE_BASE_MSGS_MESSAGE_HGPATHPLANNER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <move_base_msgs/pathpoint.h>

namespace move_base_msgs
{
template <class ContainerAllocator>
struct hgpathplanner_
{
  typedef hgpathplanner_<ContainerAllocator> Type;

  hgpathplanner_()
    : currentroad(0)
    , hsize(0)
    , vsize(0)
    , cellsize(0.0)
    , source(0)
    , points()  {
    }
  hgpathplanner_(const ContainerAllocator& _alloc)
    : currentroad(0)
    , hsize(0)
    , vsize(0)
    , cellsize(0.0)
    , source(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _currentroad_type;
  _currentroad_type currentroad;

   typedef uint8_t _hsize_type;
  _hsize_type hsize;

   typedef uint8_t _vsize_type;
  _vsize_type vsize;

   typedef float _cellsize_type;
  _cellsize_type cellsize;

   typedef uint8_t _source_type;
  _source_type source;

   typedef std::vector< ::move_base_msgs::pathpoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::move_base_msgs::pathpoint_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::move_base_msgs::hgpathplanner_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_base_msgs::hgpathplanner_<ContainerAllocator> const> ConstPtr;

}; // struct hgpathplanner_

typedef ::move_base_msgs::hgpathplanner_<std::allocator<void> > hgpathplanner;

typedef boost::shared_ptr< ::move_base_msgs::hgpathplanner > hgpathplannerPtr;
typedef boost::shared_ptr< ::move_base_msgs::hgpathplanner const> hgpathplannerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_base_msgs::hgpathplanner_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_base_msgs::hgpathplanner_<ContainerAllocator1> & lhs, const ::move_base_msgs::hgpathplanner_<ContainerAllocator2> & rhs)
{
  return lhs.currentroad == rhs.currentroad &&
    lhs.hsize == rhs.hsize &&
    lhs.vsize == rhs.vsize &&
    lhs.cellsize == rhs.cellsize &&
    lhs.source == rhs.source &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_base_msgs::hgpathplanner_<ContainerAllocator1> & lhs, const ::move_base_msgs::hgpathplanner_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_base_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_base_msgs::hgpathplanner_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_base_msgs::hgpathplanner_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_base_msgs::hgpathplanner_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aac1ecdd9fd50037e6e79455d05d1e5b";
  }

  static const char* value(const ::move_base_msgs::hgpathplanner_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaac1ecdd9fd50037ULL;
  static const uint64_t static_value2 = 0xe6e79455d05d1e5bULL;
};

template<class ContainerAllocator>
struct DataType< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_base_msgs/hgpathplanner";
  }

  static const char* value(const ::move_base_msgs::hgpathplanner_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 currentroad\n"
"uint8 hsize\n"
"uint8 vsize\n"
"float32 cellsize\n"
"uint8 source\n"
"pathpoint[] points\n"
"\n"
"================================================================================\n"
"MSG: move_base_msgs/pathpoint\n"
"float64 x\n"
"float64 y\n"
"uint8 value\n"
"int8 u\n"
"float64 heading\n"
"\n"
;
  }

  static const char* value(const ::move_base_msgs::hgpathplanner_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentroad);
      stream.next(m.hsize);
      stream.next(m.vsize);
      stream.next(m.cellsize);
      stream.next(m.source);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hgpathplanner_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_base_msgs::hgpathplanner_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_base_msgs::hgpathplanner_<ContainerAllocator>& v)
  {
    s << indent << "currentroad: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.currentroad);
    s << indent << "hsize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hsize);
    s << indent << "vsize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vsize);
    s << indent << "cellsize: ";
    Printer<float>::stream(s, indent + "  ", v.cellsize);
    s << indent << "source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.source);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::move_base_msgs::pathpoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_BASE_MSGS_MESSAGE_HGPATHPLANNER_H
