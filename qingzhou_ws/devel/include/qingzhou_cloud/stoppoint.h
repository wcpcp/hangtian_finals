// Generated by gencpp from file qingzhou_cloud/stoppoint.msg
// DO NOT EDIT!


#ifndef QINGZHOU_CLOUD_MESSAGE_STOPPOINT_H
#define QINGZHOU_CLOUD_MESSAGE_STOPPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qingzhou_cloud
{
template <class ContainerAllocator>
struct stoppoint_
{
  typedef stoppoint_<ContainerAllocator> Type;

  stoppoint_()
    : X(0.0)
    , Y(0.0)
    , updownstatus(0)
    , startCommand(0)  {
    }
  stoppoint_(const ContainerAllocator& _alloc)
    : X(0.0)
    , Y(0.0)
    , updownstatus(0)
    , startCommand(0)  {
  (void)_alloc;
    }



   typedef float _X_type;
  _X_type X;

   typedef float _Y_type;
  _Y_type Y;

   typedef uint8_t _updownstatus_type;
  _updownstatus_type updownstatus;

   typedef uint8_t _startCommand_type;
  _startCommand_type startCommand;





  typedef boost::shared_ptr< ::qingzhou_cloud::stoppoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qingzhou_cloud::stoppoint_<ContainerAllocator> const> ConstPtr;

}; // struct stoppoint_

typedef ::qingzhou_cloud::stoppoint_<std::allocator<void> > stoppoint;

typedef boost::shared_ptr< ::qingzhou_cloud::stoppoint > stoppointPtr;
typedef boost::shared_ptr< ::qingzhou_cloud::stoppoint const> stoppointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qingzhou_cloud::stoppoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qingzhou_cloud::stoppoint_<ContainerAllocator1> & lhs, const ::qingzhou_cloud::stoppoint_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.updownstatus == rhs.updownstatus &&
    lhs.startCommand == rhs.startCommand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qingzhou_cloud::stoppoint_<ContainerAllocator1> & lhs, const ::qingzhou_cloud::stoppoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qingzhou_cloud

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qingzhou_cloud::stoppoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qingzhou_cloud::stoppoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qingzhou_cloud::stoppoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66100b3bfca7763e0a4f3b7884b40cac";
  }

  static const char* value(const ::qingzhou_cloud::stoppoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66100b3bfca7763eULL;
  static const uint64_t static_value2 = 0x0a4f3b7884b40cacULL;
};

template<class ContainerAllocator>
struct DataType< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qingzhou_cloud/stoppoint";
  }

  static const char* value(const ::qingzhou_cloud::stoppoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 X\n"
"float32 Y\n"
"uint8 updownstatus\n"
"uint8 startCommand\n"
;
  }

  static const char* value(const ::qingzhou_cloud::stoppoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.updownstatus);
      stream.next(m.startCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stoppoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qingzhou_cloud::stoppoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qingzhou_cloud::stoppoint_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "updownstatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.updownstatus);
    s << indent << "startCommand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QINGZHOU_CLOUD_MESSAGE_STOPPOINT_H
