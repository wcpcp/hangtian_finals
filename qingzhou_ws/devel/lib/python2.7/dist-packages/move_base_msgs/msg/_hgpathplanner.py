# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from move_base_msgs/hgpathplanner.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import move_base_msgs.msg

class hgpathplanner(genpy.Message):
  _md5sum = "aac1ecdd9fd50037e6e79455d05d1e5b"
  _type = "move_base_msgs/hgpathplanner"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 currentroad
uint8 hsize
uint8 vsize
float32 cellsize
uint8 source
pathpoint[] points

================================================================================
MSG: move_base_msgs/pathpoint
float64 x
float64 y
uint8 value
int8 u
float64 heading

"""
  __slots__ = ['currentroad','hsize','vsize','cellsize','source','points']
  _slot_types = ['uint8','uint8','uint8','float32','uint8','move_base_msgs/pathpoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       currentroad,hsize,vsize,cellsize,source,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hgpathplanner, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.currentroad is None:
        self.currentroad = 0
      if self.hsize is None:
        self.hsize = 0
      if self.vsize is None:
        self.vsize = 0
      if self.cellsize is None:
        self.cellsize = 0.
      if self.source is None:
        self.source = 0
      if self.points is None:
        self.points = []
    else:
      self.currentroad = 0
      self.hsize = 0
      self.vsize = 0
      self.cellsize = 0.
      self.source = 0
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB().pack(_x.currentroad, _x.hsize, _x.vsize, _x.cellsize, _x.source))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_2dBbd().pack(_x.x, _x.y, _x.value, _x.u, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.currentroad, _x.hsize, _x.vsize, _x.cellsize, _x.source,) = _get_struct_3BfB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = move_base_msgs.msg.pathpoint()
        _x = val1
        start = end
        end += 26
        (_x.x, _x.y, _x.value, _x.u, _x.heading,) = _get_struct_2dBbd().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB().pack(_x.currentroad, _x.hsize, _x.vsize, _x.cellsize, _x.source))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_2dBbd().pack(_x.x, _x.y, _x.value, _x.u, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.currentroad, _x.hsize, _x.vsize, _x.cellsize, _x.source,) = _get_struct_3BfB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = move_base_msgs.msg.pathpoint()
        _x = val1
        start = end
        end += 26
        (_x.x, _x.y, _x.value, _x.u, _x.heading,) = _get_struct_2dBbd().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dBbd = None
def _get_struct_2dBbd():
    global _struct_2dBbd
    if _struct_2dBbd is None:
        _struct_2dBbd = struct.Struct("<2dBbd")
    return _struct_2dBbd
_struct_3BfB = None
def _get_struct_3BfB():
    global _struct_3BfB
    if _struct_3BfB is None:
        _struct_3BfB = struct.Struct("<3BfB")
    return _struct_3BfB
